import Head from "next/head";
import { api } from "~/utils/api";
import { useUser, SignIn } from "@clerk/nextjs";
import { useState } from "react";
import Spinner from "~/components/spinner";

function ProfileNameForm() {
    const [profileName, setProfileName] = useState("");
    const mutation = api.user.addProfileName.useMutation({
        onSuccess: () => {
            window.location.reload();
        }
    });

    const onNameChange = (e: React.FormEvent<HTMLInputElement>) => {
        e.preventDefault();
        setProfileName(e.currentTarget.value);
    }

    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        mutation.mutate({ profileName });
    }

    return (
        <form className="w-full max-w-sm" onSubmit={handleSubmit}>
            <div>Enter your profile name</div><br />
            <div className="flex items-center border-b border-teal-500 py-2">
                <input className="appearance-none bg-transparent border-none w-full text-gray-700 mr-3 py-1 px-2 leading-tight focus:outline-none" type="text" placeholder="Enter here!" aria-label="Full name" value={profileName} onChange={onNameChange}/>
                {
                    mutation.isLoading ? <Spinner /> : <button className="flex-shrink-0 bg-teal-500 hover:bg-teal-700 border-teal-500 hover:border-teal-700 text-sm border-4 text-white py-1 px-2 rounded" type="submit">
                        Enter
                    </button>
                }
            </div>
            {mutation.error ? <div>{mutation.error.message}</div> : <></>}
        </form>        
    )
}

function AddBiasForm() {
    const membersQuery = api.group.fetchAllMembers.useQuery();
    const [ selectedGroup, setSelectedGroup ] = useState("");

    while (membersQuery.isLoading) {
        return <Spinner />;
    }

    const groups = membersQuery.data?.groups;
    const members = membersQuery.data?.members;

    return (
        <div>
            Addbias form {selectedGroup}
            <div className="relative w-full lg:max-w-sm">
                <select className="w-full p-2.5 text-gray-500 bg-white border rounded-md shadow-sm outline-none appearance-none focus:border-indigo-600" onChange={
                    e => {
                        e.preventDefault();
                        setSelectedGroup(e.target.name);
                    }
                    }>
                    <option>ReactJS Dropdown</option>
                    <option>Laravel 9 with React</option>
                    <option>React with Tailwind CSS</option>
                    <option>React With Headless UI</option>
                </select>
            </div>
            {
                selectedGroup ? <div>member selector</div> : <div></div>
            }
        </div>
    )

}

export default function Home() {
    const { isLoaded, isSignedIn, user } = useUser();
    const [ showAddForm, setShowAddFrom ] = useState(false);
    const biases = api.user.fetchUserBiases.useQuery();

    if (!isSignedIn) {
        return (<div>Test<SignIn /></div>)
    }

    if (isSignedIn && user && !user.publicMetadata?.profileName) {
        return <ProfileNameForm />
    }


    while (biases.isLoading) {
        return <Spinner />
    }

    return (
        <>
            <Head>
                <title>Edit</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className="flex min-h-screen flex-col items-center justify-center">
                <table className="table-auto">
                    <thead>
                        <tr>
                            <th>Group</th>
                            <th>Member</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            biases.data?.userBiases?.map(bias => {
                                return (
                                    <tr key={bias.memberId}>
                                        <td>{bias.member.group.name}</td>
                                        <td>{bias.member.enName}</td>
                                    </tr>
                                )
                            })
                        }
                    </tbody>
                </table>
                {
                    showAddForm ? <AddBiasForm /> : 
                        <button onClick={() => setShowAddFrom(true)}>Add</button>
                }
            </main>
        </>
    );
}
